import requests
import os

hs_app = os.environ.get('hs_app')

# Função principal
def main(event):
    hs_object_id = str(event["inputFields"]["hs_object_id"])

    object_type, to_object_type = '2-17313055', 'tasks'
    url = f'https://api.hubapi.com/crm/v4/objects/{object_type}/{hs_object_id}/associations/{to_object_type}?limit=500'
    headers = {'authorization': f'Bearer {hs_app}'}

    req_association = requests.get(url, headers=headers)
    associations_data = req_association.json()

    oldest_task_timestamp = None  # Inicializa como None para garantir que qualquer chamada seja mais antiga

    for association in associations_data['results']:
        task_id = str(association['toObjectId'])
        url = f'https://api.hubapi.com/crm/v3/objects/tasks/{task_id}?propertiesWithHistory=hs_task_status&properties=hs_task_subject&archived=false'

        req_task = requests.get(url, headers=headers)
        task_data = req_task.json()

        if ('properties' in task_data and 'hs_task_subject' in task_data['properties'] and
            task_data['properties']['hs_task_subject'] == 'Realizar pesquisa e primeiro contato'):

            if 'propertiesWithHistory' in task_data and 'hs_task_status' in task_data['propertiesWithHistory']:
                for status_change in task_data['propertiesWithHistory']['hs_task_status']:
                    if status_change['value'] == 'COMPLETED':
                        task_timestamp = status_change['timestamp']
                        
                        # Atualiza o timestamp mais antigo se o encontrado for mais antigo
                        if oldest_task_timestamp is None or task_timestamp < oldest_task_timestamp:
                            oldest_task_timestamp = task_timestamp
                            break  # Uma vez que encontramos o timestamp mais antigo, podemos parar a iteração

    return {
        "outputFields": {
            "hs_object_id": hs_object_id,
            "oldest_task_timestamp": oldest_task_timestamp
        }
    }
