import requests
import os

hs_app = os.environ.get('hs_app')

# Função principal
def main(event):
    hs_object_id = str(event["inputFields"]["hs_object_id"])

    object_type, to_object_type = '2-17313055', 'call'
    url = f'https://api.hubapi.com/crm/v4/objects/{object_type}/{hs_object_id}/associations/{to_object_type}?limit=500'
    headers = {'authorization': f'Bearer {hs_app}'}

    req_association = requests.get(url, headers=headers)
    associations_data = req_association.json()

    oldest_call_timestamp = None  # Inicializa como None para garantir que qualquer chamada seja mais antiga

    for association in associations_data['results']:
        call_id = str(association['toObjectId'])
        url = f'https://api.hubapi.com/crm/v3/objects/call/{call_id}?properties=hs_timestamp&properties=hs_call_disposition&archived=false'

        req_call = requests.get(url, headers=headers)
        call_data = req_call.json()

        if 'properties' in call_data and 'hs_timestamp' in call_data['properties']:
            call_timestamp = call_data['properties']['hs_timestamp']
            
            # Atualiza o timestamp mais antigo se o encontrado for mais antigo
            if oldest_call_timestamp is None or call_timestamp < oldest_call_timestamp:
                oldest_call_timestamp = call_timestamp

    return {
        "outputFields": {
            "hs_object_id": hs_object_id,
            "oldest_call_timestamp": oldest_call_timestamp
        }
    }
